services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: development
    ports:
      - "8000:8000"
    volumes:
      # Mount API directory for hot reload
      - ./api:/app
      # Use named volume for Python cache to improve performance
      - python_cache:/root/.cache/pip
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
    env_file:
      - ./api/.env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_API_VERSION=/api/v1
      - API_URL=http://api:8000
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL database service
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: logs_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Add Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped

volumes:
  python_cache:
  postgres_data:
  node_modules:

networks:
  default:
    name: logs-dashboard-network
