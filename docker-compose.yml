services:
  # API Service - Development
  api:
    profiles: ["dev", "development"]
    build:
      context: ./api
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      # Mount API directory for hot reload
      - ./api:/app
      # Use named volume for Python cache to improve performance
      - python_cache:/root/.cache/pip
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
    env_file:
      - ./api/.env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Service - Testing
  api-test:
    profiles: ["test", "api-test"]
    build:
      context: ./api
      dockerfile: Dockerfile
      target: test
    environment:
      - DATABASE_URL=postgresql://postgres:password@db-test:5432/logs_dashboard_test
      - DEBUG=true
      - ENVIRONMENT=test
    depends_on:
      db-test:
        condition: service_healthy
    volumes:
      - ./api:/app  # Mount source code for development
    entrypoint: []  # Override the entrypoint to avoid database seeding

  # Frontend Service - Development
  frontend:
    profiles: ["dev", "development"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_API_VERSION=/api/v1
      - API_URL=http://api:8000
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Service - Testing
  frontend-test:
    profiles: ["test", "frontend-test"]
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: test
    environment:
      - NODE_ENV=test
      - BUN_RUNTIME_TRANSPILER_CACHE_PATH=0
    volumes:
      # Mount source files but preserve container's node_modules
      - ./frontend/app:/app/app
      - ./frontend/lib:/app/lib
      - ./frontend/components:/app/components
      - ./frontend/package.json:/app/package.json
      - ./frontend/bun.config.ts:/app/bun.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts
      - ./frontend/next.config.mjs:/app/next.config.mjs
    command: ["bun", "test"]  # Default command for running tests

  # PostgreSQL database service - Development
  db:
    profiles: ["dev", "development"]
    image: postgres:15
    environment:
      POSTGRES_DB: logs_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database service - Testing
  db-test:
    profiles: ["test", "api-test"]
    image: postgres:15
    environment:
      POSTGRES_DB: logs_dashboard_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"  # Different port to avoid conflicts with main db
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  python_cache:
  postgres_data:
  postgres_test_data:
  node_modules:

networks:
  default:
    name: logs-dashboard-network